import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ProviderManager {
    private static Connection conn;
    private String url = "jdbc:hsqldb:hsql://localhost/workdb";
    private String createTableProvider =
            "CREATE TABLE Provider(idProvider int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, providerName varchar(30))";

    private static PreparedStatement addProviderStmt;
    private static PreparedStatement deleteProviderStmt;
    private static PreparedStatement updateProviderStmt;
    private static PreparedStatement getAllProvidersStmt;
    private Statement stmt;

    public ProviderManager (){
        try {
            conn = DriverManager.getConnection(url);
            stmt = conn.createStatement();

            ResultSet rs = conn.getMetaData().getTables(null, null, null, null);
            boolean tableExists = false;
            while (rs.next()){
                if("Provider".equalsIgnoreCase(rs.getString("TABLE_NAME"))){
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                stmt.executeUpdate(createTableProvider);

            addProviderStmt = conn.prepareStatement("INSERT INTO Provider(providerName) VALUES (?)");
            deleteProviderStmt = conn.prepareStatement("DELETE FROM Provider WHERE idProvider=?");
            updateProviderStmt = conn.prepareStatement("UPDATE Provider SET providerName = ? WHERE idProvider = ?");
            getAllProvidersStmt = conn.prepareStatement("SELECT idProvider, providerName FROM Provider");
        } catch (SQLException e){
            e.printStackTrace();
        }
    }

    public Connection getConn() { return conn; }

    public int addProvider(Provider p){
        int count = 0;
        try {
            addProviderStmt.setString(1, p.getProviderName());

            count = addProviderStmt.executeUpdate();
        } catch (SQLException e){
            e.printStackTrace();
        }
        return count;
    }

    public void deleteProvider(int idProvider){
        try {
            deleteProviderStmt.setInt(1, idProvider);

            deleteProviderStmt.executeUpdate();
        } catch (SQLException e){
            e.printStackTrace();
        }
    }

    public List<Provider> getAllProviders() {
                List<Provider> providerList = new ArrayList<Provider>();

                try {
                    ResultSet rs = getAllProvidersStmt.executeQuery();

                    while (rs.next()) {
                        Provider provider = new Provider();
                        provider.setIdProvider(rs.getInt("idProvider"));
                        provider.setProviderName(rs.getString("providerName"));
                        providerList.add(provider);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
        }

        return providerList;
    }

    public int updateProvider(Provider provider){
        int count = 0;
        try {
            updateProviderStmt.setString(1, provider.getProviderName());
            updateProviderStmt.setInt(2, provider.getIdProvider());

            count = updateProviderStmt.executeUpdate();
        } catch (SQLException e){
            e.printStackTrace();
        }
        return count;
    }
}
